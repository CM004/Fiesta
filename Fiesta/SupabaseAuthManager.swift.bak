import Foundation
import Supabase
import SwiftUI

@MainActor
class SupabaseAuthManager: ObservableObject {
    static let shared = SupabaseAuthManager()
    
    // The real Supabase client
    private let client: SupabaseClient
    
    @Published var currentUser: User?
    @Published var session: Session?
    @Published var isAuthenticated = false
    @Published var isLoading = false
    @Published var error: Error?
    
    private init() {
        // Initialize Supabase client with real credentials
        self.client = SupabaseClient(
            supabaseURL: URL(string: SupabaseConfig.supabaseURL)!,
            supabaseKey: SupabaseConfig.supabaseAnonKey
        )
        
        print("SupabaseAuthManager: Initialized with URL \(SupabaseConfig.supabaseURL)")
        
        // Set up auth state listener
        Task {
            await monitorAuthState()
        }
    }
    
    // MARK: - Auth State Management
    
    private func monitorAuthState() async {
        do {
            // First, check if we have a stored session
            if let existingSession = try? await client.auth.session {
                self.session = existingSession
                self.isAuthenticated = true
                print("SupabaseAuthManager: Found existing session for \(existingSession.user.email)")
                
                // Fetch the user profile to complete setup
                await fetchUserProfile(userId: existingSession.user.id)
            } else {
                print("SupabaseAuthManager: No existing session found")
            }
            
            // Listen for future auth changes
            for await authStateChange in await client.auth.authStateChanges {
                switch authStateChange.event {
                case .initialSession, .signedIn:
                    if let session = authStateChange.session {
                        print("SupabaseAuthManager: Auth state change - signed in: \(session.user.email)")
                        self.session = session
                        self.isAuthenticated = true
                        await fetchUserProfile(userId: session.user.id)
                    }
                case .signedOut, .tokenRefreshFailure:
                    print("SupabaseAuthManager: Auth state change - signed out")
                    self.session = nil
                    self.currentUser = nil
                    self.isAuthenticated = false
                default:
                    break
                }
            }
        } catch {
            print("SupabaseAuthManager: Error monitoring auth state: \(error.localizedDescription)")
        }
    }
    
    private func fetchUserProfile(userId: String) async {
        // Use SupabaseManager to fetch the user profile after auth state changes
        if let profile = try? await SupabaseManager.shared.fetchUserProfile(id: userId) {
            self.currentUser = profile
            print("SupabaseAuthManager: Loaded user profile for \(profile.name)")
        } else {
            print("SupabaseAuthManager: No profile found for user \(userId) - will create on next sign-in")
        }
    }
    
    // MARK: - Authentication Methods
    
    func signUp(email: String, password: String, name: String) async throws {
        isLoading = true
        error = nil
        
        do {
            // 1. First directly sign up with Supabase Auth
            print("SupabaseAuthManager: Creating auth user account for \(email)")
            
            var options = AuthOptions()
            options.data = [
                "name": name
            ]
            
            let authResponse = try await client.auth.signUp(
                email: email,
                password: password,
                options: options
            )
            
            guard let session = authResponse.session, let authUser = authResponse.user else {
                throw NSError(domain: "Auth", code: 500, userInfo: [
                    NSLocalizedDescriptionKey: "Failed to create user in Supabase Auth"
                ])
            }
            
            print("SupabaseAuthManager: Auth user created: \(authUser.id)")
            self.session = session
            self.isAuthenticated = true
            
            // 2. Create the user profile
            let newUser = User(
                id: authUser.id,
                name: name,
                email: email.lowercased(),
                role: .student,
                cqScore: 0.0,
                createdAt: Date(),
                isActive: true,
                mealsSaved: 0,
                mealsSwapped: 0,
                mealsDistributed: 0
            )
            
            print("SupabaseAuthManager: Creating user profile for \(authUser.id)")
            // 3. Insert the profile directly
            try await createUserProfileDirectly(user: newUser)
            
            // 4. Set current user
            self.currentUser = newUser
            print("SupabaseAuthManager: Sign up complete for \(name)")
            
            isLoading = false
        } catch {
            isLoading = false
            self.error = error
            print("SupabaseAuthManager: Sign up failed: \(error.localizedDescription)")
            throw error
        }
    }
    
    func signIn(email: String, password: String) async throws {
        isLoading = true
        error = nil
        
        do {
            print("SupabaseAuthManager: Signing in \(email)")
            
            // 1. Sign in through Supabase Auth
            let authResponse = try await client.auth.signInWithPassword(
                email: email,
                password: password
            )
            
            guard let session = authResponse.session else {
                throw NSError(domain: "Auth", code: 500, userInfo: [
                    NSLocalizedDescriptionKey: "Failed to sign in - no session created"
                ])
            }
            
            print("SupabaseAuthManager: Sign-in successful: \(session.user.id)")
            self.session = session
            self.isAuthenticated = true
            
            // 2. Get the user profile
            if let profile = try? await SupabaseManager.shared.fetchUserProfile(id: session.user.id) {
                self.currentUser = profile
                print("SupabaseAuthManager: Loaded user profile for \(profile.name)")
            } else {
                // No profile exists, create one
                print("SupabaseAuthManager: Creating missing user profile for \(session.user.id)")
                
                // Create and save a new profile
                let displayName = session.user.userMetadata["name"] as? String ?? 
                                 session.user.email.components(separatedBy: "@").first ?? "User"
                                 
                let newUser = User(
                    id: session.user.id,
                    name: displayName,
                    email: session.user.email,
                    role: .student,
                    cqScore: 0.0,
                    createdAt: Date(),
                    isActive: true,
                    mealsSaved: 0,
                    mealsSwapped: 0,
                    mealsDistributed: 0
                )
                
                try await createUserProfileDirectly(user: newUser)
                self.currentUser = newUser
            }
            
            isLoading = false
        } catch {
            isLoading = false
            self.error = error
            print("SupabaseAuthManager: Sign in failed: \(error.localizedDescription)")
            throw error
        }
    }
    
    func signOut() async throws {
        isLoading = true
        error = nil
        
        do {
            print("SupabaseAuthManager: Signing out...")
            try await client.auth.signOut()
            
            self.session = nil
            self.currentUser = nil
            self.isAuthenticated = false
            print("SupabaseAuthManager: Sign out successful")
            
            isLoading = false
        } catch {
            isLoading = false
            self.error = error
            print("SupabaseAuthManager: Sign out failed: \(error.localizedDescription)")
            throw error
        }
    }
    
    // MARK: - Direct Database Functions
    
    /// Direct insertion of user profile using service role key
    private func createUserProfileDirectly(user: User) async throws {
        try await SupabaseManager.shared.upsertUserProfile(user: user)
    }
    
    func resetPassword(email: String) async throws {
        isLoading = true
        error = nil
        
        do {
            try await client.auth.resetPasswordForEmail(email: email)
            print("Auth: Password reset email sent to \(email)")
            isLoading = false
        } catch {
            isLoading = false
            self.error = error
            print("Auth: Password reset failed: \(error.localizedDescription)")
            throw error
        }
    }
    
    var userId: String? {
        return currentUser?.id ?? session?.user.id
    }
    
    // Check if the email is already registered with Supabase
    func isEmailRegistered(email: String) async -> Bool {
        do {
            print("SupabaseAuthManager: Checking if email exists: \(email)")
            
            // The most reliable way to check if an email exists is to 
            // try to sign up with it but with an invalid password
            // If the error says "User already registered", the email exists
            var options = AuthOptions()
            options.emailRedirectTo = nil
            
            do {
                // Try to sign up with a deliberately wrong/short password
                // This will fail, but we can check if it fails because the
                // email already exists or because of the password
                _ = try await client.auth.signUp(
                    email: email,
                    password: "x", // Deliberately incorrect password
                    options: options
                )
                
                // If we get here, the email doesn't exist yet (but the API would
                // likely have returned an error about the password)
                print("SupabaseAuthManager: Email \(email) is available")
                return false
            } catch let signupError as NSError {
                // Check if the error message indicates the email already exists
                let errorMessage = signupError.localizedDescription.lowercased()
                
                if errorMessage.contains("already registered") || errorMessage.contains("already in use") {
                    print("SupabaseAuthManager: Email \(email) is already registered")
                    return true
                } else {
                    // Error was due to something else (likely the invalid password)
                    print("SupabaseAuthManager: Email \(email) is available (error was about password)")
                    return false
                }
            }
        } catch {
            print("SupabaseAuthManager: Error checking email: \(error.localizedDescription)")
            return false // Default to allowing signup attempt if we can't verify
        }
    }
} 